<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aYuのblog</title>
  
  
  <link href="http://www.ayu.link/atom.xml" rel="self"/>
  
  <link href="http://www.ayu.link/"/>
  <updated>2021-12-08T14:50:34.686Z</updated>
  <id>http://www.ayu.link/</id>
  
  <author>
    <name>aYu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring IOC配置与使用</title>
    <link href="http://www.ayu.link/2021/12/07/Spring-IOC%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.ayu.link/2021/12/07/Spring-IOC%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-07T08:03:00.000Z</published>
    <updated>2021-12-08T14:50:34.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    上篇文章简单介绍了IOC, 本文则是重点讲述如何使用Spring5里的IOC进行Bean管理, 有两种方式, 分别是基于xml文件和注解, 我们都会一一讲到。</p><h2 id="BeanFactory接口"><a href="#BeanFactory接口" class="headerlink" title="BeanFactory接口"></a>BeanFactory接口</h2><p>IOC容器的底层就是对象工厂</p><p>Spring提供了IOC容器的两种实现方式(两个接口):</p><ul><li><p>BeanFactory: IOC容器基本实现, 是Spring内部使用的接口, 不提供给开发人员使用, <strong>加载文件的时候不会船舰对象, 在获取对象的时候才会创建对象</strong>。</p></li><li><p>ApplicationContext: BeanFactory接口的子接口, 提供更多更强大的功能, <strong>加载配置文件的时候就会把在配置文件中配置好的对象进行创建</strong>。</p><p>ApplicationContext的四个常用实现类:</p><ul><li><strong>FileSystemXmlApplicationContext：</strong>加载配置文件的时候采用的是项目的路径, 也就是绝对路径。</li><li><strong>ClassPathXmlApplicationContext：</strong>加载配置文件的时候根据ClassPath位置, 也就是项目相对路径。</li><li><strong>XmlWebApplicationContext：</strong>在Web环境下初始化监听器的时候会加载该类。</li><li><strong>AnnotationConfigApplicationContext：</strong>根据注解的方式启动Spring 容器。</li></ul></li></ul><h2 id="SpringDI的方式"><a href="#SpringDI的方式" class="headerlink" title="SpringDI的方式"></a>SpringDI的方式</h2><p>​    Spring提供了三种方式来依赖注入,有构造方法注入, setter方法注入以及接口注入。其中Spring以往推荐使用Setter的方法现在改成推荐构造方法注入。使用构造方法注入需要注意的一点就是要避免循环依赖。所谓的循环依赖指的就是在A对象的构造方法中Spring要注入B，而在B对象中Spring要注入A。这个时候会形成一个闭环因为Spring不知道该先注入哪一个接着会抛出异常。而Spring建议的处理方式是说如果遇到这种情况的话就改用Setter方式注入。</p><h2 id="Bean管理-基于xml"><a href="#Bean管理-基于xml" class="headerlink" title="Bean管理(基于xml)"></a>Bean管理(基于xml)</h2><h3 id="基于xml创建对象"><a href="#基于xml创建对象" class="headerlink" title="基于xml创建对象:"></a>基于xml创建对象:</h3><ul><li>在Spring配置文件中, 使用bean标签创建对象</li><li>在bean标签中有多个属性, 常用的有:<ul><li>id: 唯一标识, 用于获取对象</li><li>class: 类的全路径</li></ul></li><li>创建对象的时候, 默认的是执行无参构造方法完成对象创建</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象的创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于xml方式注入属性"><a href="#基于xml方式注入属性" class="headerlink" title="基于xml方式注入属性:"></a>基于xml方式注入属性:</h3><ul><li><p>使用set方法进行注入</p><p>在bean标签内使用property标签完成属性注入:</p><p>name: 类中属性名称</p><p>value: 属性中注入的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用set方法进行参数注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用有参构造器进行注入</p><p>在bean标签内使用constructor-arg标签完成属性注入:</p><p>name: 类中属性名称</p><p>value: 属性中注入的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用有参构造方法进行参数注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jerry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="xml注入其他属性"><a href="#xml注入其他属性" class="headerlink" title="xml注入其他属性:"></a>xml注入其他属性:</h3><ul><li><p>字面量</p><ul><li><p>null值</p><p>使用<code><null/></code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--null值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性值包含特殊符号</p><p>使用CDATA</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--特殊字符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[&lt;&lt;时生&gt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>注入外部bean</p><p>使用ref属性注入外部创建好的bean对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.dao.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入内部bean</p><p>直接在property标签里创建bean标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptNo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>级联赋值</p><p>对属性里的bean对象的属性进行赋值操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.deptNo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;102&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.bean.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="xml注入集合属性"><a href="#xml注入集合属性" class="headerlink" title="xml注入集合属性:"></a>xml注入集合属性:</h3><ul><li>array标签对数组进行赋值</li><li>list标签对List集合进行赋值</li><li>set标签对Set集合进行赋值</li><li>map标签对Map集合进行赋值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.collection.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>go<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>c++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java&quot;</span> <span class="attr">value</span>=<span class="string">&quot;88&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;c++&quot;</span> <span class="attr">value</span>=<span class="string">&quot;78&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>SQLServer<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.collection.Course&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.collection.Course&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SpringMVC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用util标签共享bean"><a href="#使用util标签共享bean" class="headerlink" title="使用util标签共享bean:"></a>使用util标签共享bean:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置命名空间 --&gt;</span></span><br><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                    http://www.springframework.org/schema/util</span><br><span class="line">                    http://www.springframework.org/schema/util/spring-util-2.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用util标签来配置共享的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>大话数据结构<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>程序是怎样跑起来的<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>操作系统导论<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.collection.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用p命名空间配置bean"><a href="#使用p命名空间配置bean" class="headerlink" title="使用p命名空间配置bean:"></a>使用p命名空间配置bean:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置命名空间 --&gt;</span></span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用p命名空间来配置bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;Tom&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域:"></a>Bean作用域:</h3><p>Spring中可以使用scope属性来配置bean的作用域：</p><ul><li>singleton: 单例, 在初始化配置文件时生成单例bean对象(<strong>默认</strong>)</li><li>prototype: 原型的, 在初始化配置文件时不生成bean对象, 使用时返回不同的bean对象</li><li>request: web环境下每一个request请求都会返回一个不同的bean, 只在本次请求中有效</li><li>session: web环境下每一个request请求都会返回一个不同的bean, 在session中有效</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置scope属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期:"></a>Bean生命周期:</h3><ol><li>通过构造方法生成bean的实例</li><li>为bean注入属性</li><li>调用初始化方法(<strong>通过init-method属性配置</strong>)</li><li>bean的使用</li><li>IOC容器关闭时，调用销毁方法(<strong>通过destroy-method属性配置</strong>)</li></ol><p>创建一个测试用的Order类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.set方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5.销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">        Order order = context.getBean(<span class="string">&quot;order&quot;</span>, Order.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;4.获取到bean对象&quot;</span>);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">        ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.bean.Order&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果:</p><blockquote><p>1.无参构造<br>2.set方法<br>3.初始化方法<br>4.获取到bean对象<br>com.ayu.bean.Order@69b0fd6f<br>5.销毁方法</p></blockquote><h3 id="Bean的后置处理器"><a href="#Bean的后置处理器" class="headerlink" title="Bean的后置处理器:"></a>Bean的后置处理器:</h3><p>使用后置处理器后的生命周期:</p><ol><li>通过构造方法生成bean的实例</li><li>为bean注入属性</li><li>将bean传给后置处理器的postProcessBeforeInitialization方法</li><li>调用初始化方法(<strong>通过init-method属性配置</strong>)</li><li>将bean传给后置处理器的postProcessAfterInitialization方法</li><li>bean的使用</li><li>IOC容器关闭时，调用销毁方法(<strong>通过destroy-method属性配置</strong>)</li></ol><p>创建一个后置处理器类实现BeanPostProcessor接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="keyword">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="keyword">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置BeanPostProcessor:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.bean.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果:</p><blockquote><p>1.无参构造<br>2.set方法<br>初始化之前<br>3.初始化方法<br>初始化之后<br>4.获取到bean对象<br>com.ayu.bean.Order@66d1af89<br>5.销毁方法</p></blockquote><h3 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h3><p>bean标签的autowire属性实现自动装配, autowire有两个常用的值:</p><ul><li><p>byName: 根据属性名称注入, 注入值bean的id值和类属性值名称需一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.autowrite.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.autowrite.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>byType: 根据属性类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.autowrite.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ayu.autowrite.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注: 通过byType自动装配,已配置的bean中有多个该类型的bean时会报错</p></li></ul><h2 id="Bean管理-基于注解"><a href="#Bean管理-基于注解" class="headerlink" title="Bean管理(基于注解)"></a>Bean管理(基于注解)</h2><h3 id="Spring针对bean管理提供的注解"><a href="#Spring针对bean管理提供的注解" class="headerlink" title="Spring针对bean管理提供的注解"></a>Spring针对bean管理提供的注解</h3><p> 下面四个注解功能是一样的，都可以用来创建 bean 实例</p><ul><li><strong>@Controlle</strong>r: 控制器, 推荐给controller层添加此注解。</li><li><strong>@Service</strong>: 业务逻辑, 推荐给业务逻辑层添加此注解。</li><li><strong>@Repository</strong>: 仓库管理, 推荐给数据访问层添加此注解。</li><li><strong>@Component</strong>: 给不属于以上基层的组件添加此注解。</li></ul><h3 id="基于注解实现对象创建"><a href="#基于注解实现对象创建" class="headerlink" title="基于注解实现对象创建"></a>基于注解实现对象创建</h3><ol><li><p>开启组件扫描:</p><p>如果扫面多个包, 可以用逗号隔开, 或是扫描包的上层目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ayu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建类, 在类上添加对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value属性可以不写, 会默认类名首字母小写为value的值</span></span><br><span class="line"><span class="meta">@Repository(value=&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="开启组件扫描细节配置"><a href="#开启组件扫描细节配置" class="headerlink" title="开启组件扫描细节配置"></a>开启组件扫描细节配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例一：use-default-filters表示现在不使用默认filter，自己配置filter</span></span><br><span class="line"><span class="comment">content:include-filter 设置扫面那些内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ayu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">content:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--示例二：下面配置扫面包所有内容</span></span><br><span class="line"><span class="comment">content:exclude-filter 设置哪些内容不进行扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ayu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">content:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解实现属性注入"><a href="#基于注解实现属性注入" class="headerlink" title="基于注解实现属性注入"></a>基于注解实现属性注入</h3><ul><li><p><strong>@Autowired</strong>: 根据属性类型进行自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要set方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDaO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello service&quot;</span>);</span><br><span class="line">        userDaO.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Qualifier</strong>: 根据属性名称进行注入, 通常和@Autowired一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要set方法</span></span><br><span class="line">    <span class="comment">//区别同一接口下多个实现类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;userDaoImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDaO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello service&quot;</span>);</span><br><span class="line">        userDaO.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Resource</strong>: 可以根据类型注入，也可以根据名称注入(这个注解是JDK提供的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(value=&quot;userDaoImpl&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDaO;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Value</strong>: 注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;service&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ul><h3 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h3><p>创建配置类, 代替xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.ayu&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>此时应使用<strong>AnnotationConfigApplicationContext</strong>这个实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AnnotationConfigApplicationContext需要将配置类传给它</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">userService.hello();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    上篇文章简单介绍了IOC, 本文则是重点讲述如何使用Spring5里的IOC进行Bean管理, 有两种方式, 分别是基于xml文件</summary>
      
    
    
    
    
    <category term="Spring5" scheme="http://www.ayu.link/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>IOC容器解析</title>
    <link href="http://www.ayu.link/2021/12/04/IOC%E5%AE%B9%E5%99%A8%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.ayu.link/2021/12/04/IOC%E5%AE%B9%E5%99%A8%E8%A7%A3%E6%9E%90/</id>
    <published>2021-12-04T06:51:28.000Z</published>
    <updated>2021-12-07T08:10:31.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文旨在对IOC容器的简单解析, 主要是对自己学习理解的总结, 如有错误, 欢迎各位大佬指正!</p><h2 id="IOC原理"><a href="#IOC原理" class="headerlink" title="IOC原理"></a>IOC原理</h2><h3 id="为什么要用IOC"><a href="#为什么要用IOC" class="headerlink" title="为什么要用IOC"></a>为什么要用IOC</h3><p>​    在了解什么是IOC之前, 我们先来了解一下, IOC为什么出现, 以及我们为什么要使用IOC。</p><p>​    在面向对象设计的程序系统里, 有N多个类, 这些类与类相互依赖, 相互合作, 我们的程序才能完整的运行起来, 但是久而久之就发现一些问题, 如果对一个类结构进行更改, 那么与这个类直接依赖或间接依赖的类也要做出相对应的更改; 就像一块精密的手表, 里面多个独立的齿轮相互啮合在一起, 才能正常工作, 但如果更换其中一个齿轮, 变成其他型号, 那么如果别的齿轮不去更换, 手表就很难再继续运行了; 齿轮之间的啮合就像我们程序系统里的耦合一样, 耦合是不能消除的, 我们只能尽量去降低他, 而IOC的出现就是为了解决这个问题。</p><p><img src="/img/2021-12-04/ioc-1.png"></p><h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>​    控制反转（Inversion of Control，缩写为IOC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。(引用自百度百科)</p><p>​    IOC的思想就是借助”第三方”实现依赖关系对象之间的解耦, 如下图所示:</p><p><img src="/img/2021-12-04/ioc-2.png"></p><p>​    由于引进了中间位置的“第三方”, 也就是IOC容器, 使得A、B、C、D这4个对象没有了耦合关系, 齿轮之间的传动全部依靠“第三方”了, 全部对象的控制权全部上缴给“第三方”IOC容器, 所以, IOC容器成了整个系统的关键核心, 它起到了一种类似“粘合剂”的作用, 把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”, 对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。</p><p>​    如果我们把IOC这个第三方拿掉, 这个系统就变成了:</p><p><img src="/img/2021-12-04/ioc-3.png"></p><p>​    这时候, A、B、C、D这4个对象之间已经没有了耦合关系, 彼此毫无联系, 这样的话, 当你在实现A的时候, 根本无须再去考虑B、C和D了, 对象之间的依赖关系已经降低到了最低程度。</p><h3 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h3><p>​    IOC底层使用xml解析, 工厂模式, 和反射技术。</p><p><img src="/img/2021-12-04/ioc-4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    本文旨在对IOC容器的简单解析, 主要是对自己学习理解的总结, 如有错误, 欢迎各位大佬指正!&lt;/p&gt;
&lt;h2 id=&quot;IOC原理</summary>
      
    
    
    
    
    <category term="Spring5" scheme="http://www.ayu.link/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务的四大特性以及事务的隔离级别</title>
    <link href="http://www.ayu.link/2021/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://www.ayu.link/2021/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</id>
    <published>2021-10-15T08:15:16.000Z</published>
    <updated>2021-12-07T08:09:47.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本篇将会讲述数据库中事务的四大特性(ACID), 事务控制语句, 事务会出现的几种常见问题, JDBC中如何使用事务, 并详细说明事务的隔离级别。</p><h2 id="四大特性-ACID"><a href="#四大特性-ACID" class="headerlink" title="四大特性(ACID)"></a>四大特性(ACID)</h2><p>​    如果一个数据库支持事务操作, 那么该数据库必须具备以下四大特性:</p><ul><li><p><strong>原子性(Atomicity)</strong></p><p>​        一个事务(transaction)中的所有操作, 要么全部完成,要么全部不完成, 不会在中间某个环节结束, 事务在执行过程中发生错误, 会被回滚(Rollback)到事务开始前的状态, 就像这个事务从来没有被执行过一样。</p></li><li><p><strong>一致性(Consistency)</strong></p><p>​        在事务开始之前和结束以后, 数据库的完整性没有被破坏, 这表示写入的资料必须完全符合所有的预设规则, 这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p><strong>隔离性(Isolation)</strong></p><p>​        数据库允许多个并发事务同时对其数据进行修改和读写的能力, 隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致, 事务隔离分为不同级别, 这里我们后面会讲到。</p></li><li><p><strong>持久性(Durability)</strong></p><p>​        事务处理结束后, 对数据的修改就是永久的, 即使系统故障也不会丢失。</p></li></ul><h2 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h2><ul><li><strong>BEGIN</strong> 或 <strong>START TRANSACTION</strong> 开启一个事务</li><li><strong>COMMIT</strong> 提交事务, 并使已对数据库进行的修改成为永久性的</li><li><strong>ROLLBACK</strong> 回滚并结束用户的事务, 撤销正在进行的所有未提交的修改</li><li><strong>ASAVEPIOINT identifier</strong> 在事务中创建一个保存点, 一个事务中可以有多个保存点</li><li><strong>RELEASE SAVEPOINT identifier</strong> 删除一个事务的保存点</li><li><strong>ROLLBACK TO identifier</strong> 把事务回滚到保存点</li></ul><h2 id="脏读、不可重复读和幻读"><a href="#脏读、不可重复读和幻读" class="headerlink" title="脏读、不可重复读和幻读"></a>脏读、不可重复读和幻读</h2><p>​    当多个线程都开启事务操作数据库中的数据时, 如果不考虑事务的隔离性, 会发生几种问题:</p><ul><li><p><strong>脏读</strong></p><p>脏读就是当一个事务对数据库中的数据进行了修改, 而这个修改并未提交, 此时, 另一个事务也在访问同一个数据库, 却读到了并未提交的修改后的数据。</p><p>例如:</p><p>事务A中张三向李四转账100元, 但事务并未提交,</p><p>与此同时,</p><p>事务中李四查询余额发现多了100元,</p><p>随后,</p><p>事务A发生了异常, 回滚事务, 转账的操作退回,</p><p>那么,</p><p>事务B读取到多了100元的数据即为脏数据, 我们称事务B做了一次脏读。</p></li><li><p><strong>不可重复读</strong></p><p>不可重复读是指在同一事务内, 多次读取同一数据却返回了不同的数据值, 这是因为在查询的间隔, 数据被另一个事务修改并提交了。</p><p>例如:</p><p>在事务A中, 读取到了张三的工资为5000, 事务还未提交,</p><p>与此同时,</p><p>事务B把张三的工资修改为了8000, 并提交了事务,</p><p>随后,</p><p>事务A再次查询张三的工资变为了8000, 在一个事务中多次读取结果不一致, 我们称发生了不可重复读。</p><p>不可重复读与脏读的区别在于, 脏读是一个事务读取到了另一个事务并未提交的数据, 而不可重复读则是读取到了另一事务提交的数据。</p></li><li><p><strong>幻读(虚读)</strong></p><p>幻读是指当事务不是独立执行时发生的一种现象, 如果一个事务的操作的对象是表的全部数据行, 此时, 另一个事务给表中插入一条新的数据, 那么, 第一个事务操作的用户会发现有一行数据并没有被操作到, 就像发生了幻觉一样。</p><p>例如:</p><p>事务A读取到工资大于5000的人数为10人</p><p>此时,</p><p>事务B插入一条工资为6000的员工数据并提交,</p><p>那么,</p><p>当事务A再次读取工资大于5000的人数就变成了11人, 这就产生了幻读。</p><p>幻读和不可重复读都是读取到了另一事务提交后的数据, 不同的是, 不可重复读强调的是修改, 主要针对同一条数据, 而幻读强调的是新增和删除, 针对的是一批数据的整体。</p></li></ul><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>Mysql中的四种隔离级别:</p><ul><li><p><strong>Read uncommitted (读未提交)</strong></p><p>最低级别，任何情况都无法保证。</p></li><li><p><strong>Read committed (读已提交)</strong></p><p>是大多数DBMS(如: Oracle, SQLServer)的默认事务隔离级别, 可避免脏读的发生。</p></li><li><p><strong>Repeatable read (可重复读)</strong></p><p>是Mysql的默认事务隔离级别, 可避免脏读、不可重复读的发生。</p></li><li><p><strong>Serializable (串行化)</strong></p><p>事务隔离的最高级别, 可避免脏读、不可重复读、幻读的发生。</p></li></ul><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read uncommitted (读未提交)</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center">Read committed (读已提交)</td><td align="center">-</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center">Repeatable read (可重复读)</td><td align="center">-</td><td align="center">-</td><td align="center">Yes</td></tr><tr><td align="center">Serializable (串行化)</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><p>事务级别越高, 执行效率就越低。像Serializable这样的级别, 以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待, 所以平时选用何种隔离级别应该根据实际情况。</p><p>在Mysql数据库中查看当前事务的隔离级别:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></table></figure><p>在Mysql数据库中设置事物的隔离级别:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation leve 隔离级别名称;</span><br></pre></td></tr></table></figure><p><strong>设置数据库的隔离级别一定要在事务开始之前!</strong></p><h2 id="JDBC中使用事务"><a href="#JDBC中使用事务" class="headerlink" title="JDBC中使用事务"></a>JDBC中使用事务</h2><p>JDBC中事务相关方法</p><table><thead><tr><th align="center">Modifier and Type</th><th align="center">Method and Description</th></tr></thead><tbody><tr><td align="center"><code>void</code></td><td align="center"><code>setTransactionIsolation(int level)</code>  试图改变这个 <code>Connection</code>对象的事务隔离级别的。</td></tr><tr><td align="center"><code>void</code></td><td align="center"><code>setAutoCommit(boolean autoCommit)</code>  这个连接的自动提交模式设置为给定的状态。</td></tr><tr><td align="center"><code>Savepoint</code></td><td align="center"><code>setSavepoint()</code>  在当前事务中创建了一个匿名的保存点,并返回新的  <code>Savepoint</code>对象表示。</td></tr><tr><td align="center"><code>Savepoint</code></td><td align="center"><code>setSavepoint(String name)</code>  创建一个保存点与当前事务的名字并返回新的 <code>Savepoint</code>对象表示。</td></tr><tr><td align="center"><code>void</code></td><td align="center"><code>releaseSavepoint(Savepoint savepoint)</code>  删除指定的 <code>Savepoint</code>从当前事务和随后的  <code>Savepoint</code>对象。</td></tr><tr><td align="center"><code>void</code></td><td align="center"><code>rollback()</code>  取消所有更改当前事务和释放任何数据库锁目前由这个  <code>Connection</code>对象。</td></tr><tr><td align="center"><code>void</code></td><td align="center"><code>rollback(Savepoint savepoint)</code>  取消所有更改了在给定 <code>Savepoint</code>对象集。</td></tr><tr><td align="center"><code>void</code></td><td align="center"><code>commit()</code>  使得所有的更改,因为之前的提交/回滚永久和释放任何数据库锁目前由这个  <code>Connection</code>对象。</td></tr></tbody></table><p>如果要在JDBC中设置隔离级别, 同样需要在事务开始之前设置, 也就是setAutoCommit(false)之前, 使用setTransactionIsolation(level)方法设置, 其中的level是Connection类中的静态字段:</p><table><thead><tr><th align="center">Modifier and Type</th><th align="center">Field and Description</th></tr></thead><tbody><tr><td align="center"><code>static int</code></td><td align="center"><code>TRANSACTION_NONE</code>  一个常数表明不支持事务。</td></tr><tr><td align="center"><code>static int</code></td><td align="center"><code>TRANSACTION_READ_COMMITTED</code>  一个常数表明脏读预防;不可重复读和虚读可以发生。</td></tr><tr><td align="center"><code>static int</code></td><td align="center"><code>TRANSACTION_READ_UNCOMMITTED</code>  一个常数表明脏读、不可重复读和虚读可以发生。</td></tr><tr><td align="center"><code>static int</code></td><td align="center"><code>TRANSACTION_REPEATABLE_READ</code>  一个常数表明脏读和不可重复读预防;幻读也会出现。</td></tr><tr><td align="center"><code>static int</code></td><td align="center"><code>TRANSACTION_SERIALIZABLE</code>  一个常数表明脏读、不可重复读和虚读是预防。</td></tr></tbody></table><p>部分代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">Statement statement = <span class="keyword">null</span>;</span><br><span class="line">String sql1 = <span class="string">&quot;insert into test_table values(Tom, 123)&quot;</span>;</span><br><span class="line">String sql2 = <span class="string">&quot;insert into test_table values(Jerry, 123)&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    connection = dbUtil.getConnection();</span><br><span class="line">    <span class="comment">//设置隔离级别</span></span><br><span class="line">    connection.setTransactionIsolation(TRANSACTION_REPEATABLE_READ);</span><br><span class="line">    <span class="comment">//开始事务</span></span><br><span class="line">    connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    statement = connection.createStatement();</span><br><span class="line">    statement.excuteUpdate(sql1);</span><br><span class="line">    statement.excuteUpdate(sql2);</span><br><span class="line">    <span class="comment">//如果不发生错误,提交事务</span></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">    <span class="comment">//如果发生错误,在这里回滚</span></span><br><span class="line">    connection.rollback();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//关闭资源占用</span></span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示 : 隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言, 一个窗口就相当于一个链接, 当前窗口设置的隔离级别只对当前窗口中的事务有效; 对于JDBC操作数据库来说，一个Connection对象相当于一个链接, 而对于Connection对象设置的隔离级别只对该Connection对象有效, 与其他链接Connection对象无关。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    本篇将会讲述数据库中事务的四大特性(ACID), 事务控制语句, 事务会出现的几种常见问题, JDBC中如何使用事务, 并详细说明</summary>
      
    
    
    
    
    <category term="JDBC" scheme="http://www.ayu.link/tags/JDBC/"/>
    
    <category term="数据库" scheme="http://www.ayu.link/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JDBC五种连接方式</title>
    <link href="http://www.ayu.link/2021/10/04/JDBC%E4%BA%94%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.ayu.link/2021/10/04/JDBC%E4%BA%94%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</id>
    <published>2021-10-04T15:11:56.000Z</published>
    <updated>2021-12-07T07:59:35.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC原理图"><a href="#JDBC原理图" class="headerlink" title="JDBC原理图"></a>JDBC原理图</h2><p><img src="/img/2021-10-04/jdbc.png" alt="jdbc"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>在项目目录下创建libs文件夹,将连接用的jar包导入</p><p><img src="/img/2021-10-04/10-4-1.png" alt="10-4-1"></p></li><li><p>把导入的jar包加入到项目中,右键点击jar包</p><p><img src="/img/2021-10-04/10-4-2.png" alt="10-4-2"></p></li></ol><h2 id="五种连接方式"><a href="#五种连接方式" class="headerlink" title="五种连接方式"></a>五种连接方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>该方式代码中显式出现了第三方数据库的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Driver driver = <span class="keyword">new</span> Driver();</span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/ayu_db2?useSSL=false&quot;</span>;</span><br><span class="line">        <span class="comment">//将用户名和密码放到Properties对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">        Connection connect = driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用反射实例化Driver,不在代码中体现第三方数据库的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//使用反射加载Driver类</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver) aClass.newInstance();</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/ayu_db2?useSSL=false&quot;</span>;</span><br><span class="line">        <span class="comment">//将用户名和密码放到Properties对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">        Connection connect = driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>使用DriverManager代替Driver进行统一管理,实现数据库的连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//使用DriverManager替代Driver进行统一管理</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver) aClass.newInstance();</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/ayu_db2?useSSL=false&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><p>不必显式的注册驱动了,因为在DriverManager的源码中已经存在静态代码块,实现了驱动的注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//使用Class.forName自动完成注册驱动</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver) aClass.newInstance();</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/ayu_db2?useSSL=false&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方式五-推荐"><a href="#方式五-推荐" class="headerlink" title="方式五(推荐)"></a>方式五(推荐)</h3><p>使用配置文件的方式保存配置信息,在代码中加载配置文件<br>使用配置文件的好处:</p><ol><li>实现了代码和数据的分离,如果需要修改配置信息,直接在配置文件中修改,不需要深入代码</li><li>如果修改了配置信息,省去重新编译的过程</li></ol><p>使用方法:</p><p>​    在src目录下创建jdbc.properties文件,添加以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 四个基本要素(记得修改成自己的配置信息)</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/ayu_db2</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关值</span></span><br><span class="line">        String user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC原理图&quot;&gt;&lt;a href=&quot;#JDBC原理图&quot; class=&quot;headerlink&quot; title=&quot;JDBC原理图&quot;&gt;&lt;/a&gt;JDBC原理图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/2021-10-04/jdbc.png&quot; alt=&quot;jdbc&quot;&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="JDBC" scheme="http://www.ayu.link/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客并部署到云服务器</title>
    <link href="http://www.ayu.link/2021/10/01/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.ayu.link/2021/10/01/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-10-01T09:44:31.000Z</published>
    <updated>2021-12-07T08:01:54.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于hexo搭建个人blog的文章网上有很多,但是其中一些多多少少有点问题,通过搭建本站进行了无数的踩坑,总结出了这篇搭建教程,一步步跟着做基本不会出错,话不多说,下面开始</p><h2 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h2><h3 id="一-准备"><a href="#一-准备" class="headerlink" title="一.准备"></a>一.准备</h3><p>nodejs: <a href="https://nodejs.org/zh-cn/">下载</a></p><p>git: <a href="https://git-scm.com/downloads">下载</a></p><h3 id="二-安装本地hexo环境"><a href="#二-安装本地hexo环境" class="headerlink" title="二.安装本地hexo环境"></a>二.安装本地hexo环境</h3><p>nodejs和git的安装只需要无脑下一步即可,安装完成后可以在dos窗口进行检验,输入命令<code>node -v</code>和<code>npm -v</code>查看版本信息</p><p><img src="/img/2021-10-01/10-1-1.png" alt="10-1-1"></p><h3 id="三-安装hexo框架"><a href="#三-安装hexo框架" class="headerlink" title="三.安装hexo框架"></a>三.安装hexo框架</h3><p>在非系统盘下新建一个blog文件夹,进入文件夹后右键Git Bash Here</p><p>输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//第一条   这是安装hexo的基础框架</span><br><span class="line">npm install -g hexo</span><br><span class="line"></span><br><span class="line">//第二条   这是初始化hexo框架 这个可能会比较慢</span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line">//第三条 安装所需要的组件</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">//第四条 编译生成静态页面</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">//第五条 启动本地服务</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>安装完成之后可以去浏览器输入localhost:4000进行查看,效果如下:</p><p><img src="/img/2021-10-01/10-1-2.png" alt="img/2021-10-01"></p><h2 id="将Hexo博客部署到服务器上"><a href="#将Hexo博客部署到服务器上" class="headerlink" title="将Hexo博客部署到服务器上"></a>将Hexo博客部署到服务器上</h2><h3 id="一-服务器和域名的购买"><a href="#一-服务器和域名的购买" class="headerlink" title="一.服务器和域名的购买"></a>一.服务器和域名的购买</h3><ul><li>云服务器可以选择阿里云,腾讯云,华为云,这里演示使用的是阿里云的学生机</li><li>域名建议服务器在哪个平台就在哪个平台购买,域名买完一定要第一时间备案,国内的服务器是必须要备案的,如果是香港和外国的服务器则可以不用备案</li></ul><h3 id="二-云服务器操作-阿里云为例"><a href="#二-云服务器操作-阿里云为例" class="headerlink" title="二.云服务器操作(阿里云为例)"></a>二.云服务器操作(阿里云为例)</h3><h4 id="配置安全组规则"><a href="#配置安全组规则" class="headerlink" title="配置安全组规则"></a>配置安全组规则</h4><p>阿里云默认是不授权80端口访问的,这个端口,这个端口跑的是网页服务器的访问,所以要先把它开启,否则后面配置好后也无法访问</p><p>登录控制台-&gt;云服务器ECS-&gt;安全组-&gt;安全组ID-&gt;手动添加</p><p><img src="/img/2021-10-01/10-1-3.png" alt="10-1-3"></p><h4 id="配置服务器环境"><a href="#配置服务器环境" class="headerlink" title="配置服务器环境"></a>配置服务器环境</h4><h5 id="安装服务器"><a href="#安装服务器" class="headerlink" title="安装服务器"></a>安装服务器</h5><p>远程链接云服务器后,我们需要安装搭载网站的服务器nginx,安装命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx 安装nginx</span><br><span class="line"></span><br><span class="line">systemctl start nginx 开启nginx服务</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx 跟随系统启动</span><br></pre></td></tr></table></figure><p>安装完成之后,使用公网ip访问,如果显示的是nginx或者是centos的欢迎界面的话就代表安装成功</p><h5 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h5><p><code>cd /home</code></p><p><code>mkdir www</code></p><p><code>cd www</code></p><p><code>mkdir website</code></p><p>我么们在本地上传的blog文件都会存放在这个文件夹中</p><p>回到home目录修改权限</p><p><code>cd /home</code></p><p><code>chmod -R 777 ./www</code></p><p><code>chmod -R 777 ./www/website</code></p><h5 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h5><p>这里先写好配置文件,然后使用include的方式,引入到nginx的配置文件中</p><p>在/etc/nginx/的目录下创建vhost文件夹,在vhost文件夹下编写配置文件</p><p><code>cd /etc/nginx/</code></p><p><code>mkdir vhost</code></p><p><code>cd vhost</code></p><p><code>vim blog.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen    80;</span><br><span class="line">root /home/www/website;</span><br><span class="line">server_name ;这里填你的域名</span><br><span class="line">location /&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps:注释文字要删掉</span><br></pre></td></tr></table></figure><p>然后把这个文件引入到nginx的配置文件中,并修改server中的一些值</p><p><code>vim /etc/nginx/nginx.conf</code></p><p><img src="/img/2021-10-01/10-1-4.png" alt="10-1-4"></p><p><img src="/img/2021-10-01/10-1-5.png" alt="10-1-5"></p><h3 id="三-安装Git和node-js"><a href="#三-安装Git和node-js" class="headerlink" title="三.安装Git和node.js"></a>三.安装Git和node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//安装Git</span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">// 安装Node</span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | bash -</span><br><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><p>新建一个git用户并修改权限</p><p><code>adduser git</code></p><p><code>chmod 740 /etc/sudoers</code></p><p><code>vim /etc/sudoers</code></p><p>修改配置文件,如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line"></span><br><span class="line">添加以下内容</span><br><span class="line"></span><br><span class="line">git ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>再将权限修改过来</p><p><code>chmod 400 /etc/sudoers</code></p><h4 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h4><p>在本机桌面,右键GIt Bash Here打开终端,执行如下命令(三次回车)</p><p><code>ssh-keygen -t rsa</code></p><p>在C:\Users\用户名.ssh中找到id_rsa.pub</p><p>回到服务器端执行如下操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git  //设置git密码</span><br><span class="line">su git//切换到git用户</span><br><span class="line"><span class="built_in">cd</span> ~//切换目录</span><br><span class="line">mkdir .ssh//新建.ssh文件夹</span><br><span class="line"><span class="built_in">cd</span> .ssh//进入文件夹</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span></span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><p>在本地Git终端测试连接云服务器</p><p><code>ssh -v git@你的公网IP</code></p><p>如果不需要输入密码就可以连接说明配置成功了,如果配置失败也不是什么大问题,只不过以后每次git需要输入密码</p><h3 id="四-创建git仓库"><a href="#四-创建git仓库" class="headerlink" title="四.创建git仓库"></a>四.创建git仓库</h3><p>在服务器端 创建git仓库</p><p><code>cd ~</code></p><p><code>git init --bare blog.git</code></p><p><code>vi ~/blog.git/hooks/post-receive</code></p><p>添加下面的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>修改权限</p><p><code>chmod +x ~/blog.git/hooks/post-receive</code></p><h3 id="五-完成部署"><a href="#五-完成部署" class="headerlink" title="五.完成部署"></a>五.完成部署</h3><p>修改hexo的配置文件,就是blog文件夹下的_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@你的服务器公网IP:/home/git/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> </span><br></pre></td></tr></table></figure><p>之后在git终端执行</p><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>最后重新运行nginx服务器即可(ps:每次hexo d后都要重启nginx服务器)</p><p><code>nginx -s reload</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;基于hexo搭建个人blog的文章网上有很多,但是其中一些多多少少有点问题,通过搭建本站进行了无数的踩坑,总结出了这篇搭建教程,一步步跟着做</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://www.ayu.link/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.ayu.link/2021/09/04/hello-world/"/>
    <id>http://www.ayu.link/2021/09/04/hello-world/</id>
    <published>2021-09-04T09:07:46.000Z</published>
    <updated>2021-12-07T07:54:34.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的小破站"><a href="#欢迎来到我的小破站" class="headerlink" title="欢迎来到我的小破站"></a>欢迎来到我的小破站</h2><p>​        本站是基于hexo框架搭建的静态博客，在使用这款框架之前，我也用过wordpress，halo这些框架，和这些比起来hexo的配置好像更加麻烦，但也更加灵活，而且作为一款静态博客框架，安全性也是更高．</p><h2 id="这个站会发布什么内容"><a href="#这个站会发布什么内容" class="headerlink" title="这个站会发布什么内容"></a>这个站会发布什么内容</h2><p>​        主要是记录我个人的成长，分享一下code方面的经验，或者是一些趣事，anyway，关注一下总是不亏的．</p><h2 id="自言自语"><a href="#自言自语" class="headerlink" title="自言自语"></a>自言自语</h2><p>​        搭建一个属于自己的网站一直是我的一个小心愿，这里可以是我的日记本，也可以是我的树洞，更可以是分享自己的一个平台，在各种短视频文化冲击的现代，如此浮躁的网络，能有一片属于自己的净土还是蛮不错的．</p><p>​        I’m OK！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;欢迎来到我的小破站&quot;&gt;&lt;a href=&quot;#欢迎来到我的小破站&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的小破站&quot;&gt;&lt;/a&gt;欢迎来到我的小破站&lt;/h2&gt;&lt;p&gt;​        本站是基于hexo框架搭建的静态博客，在使用这款框架之前，我也用过</summary>
      
    
    
    
    
    <category term="日志" scheme="http://www.ayu.link/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
